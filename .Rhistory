install.packages("data.table")
install.packages("tidyverse")
source('G:/Shared drives/202005 Sparkle conjoint (Santiago)/Experimental Design/design-sparkle-kz-DRAFT.r')
View(claims_db)
source('G:/Shared drives/202005 Sparkle conjoint (Santiago)/Experimental Design/design-sparkle-kz-DRAFT.r')
source('G:/Shared drives/202005 Sparkle conjoint (Santiago)/Experimental Design/design-sparkle-kz-DRAFT.r')
source('G:/Shared drives/202005 Sparkle conjoint (Santiago)/Experimental Design/design-sparkle-kz-DRAFT.r')
source("design functions.R")
gwd()
dir_ls()
dir_ls("base")
ls()
list.files()
shiny::runApp('G:/Shared drives/Product and statistics/202006 TURF analysis tool')
updateR()
install.packages("installr"
install.packages("installr")
library(installr)
updateR()
shiny::runApp('C:/Users/Kirill Zaitsev/Desktop/text-analysis-master')
install.packages(shinyWidgets)
install.packages('shinyWidgets'')
install.packages('shinyWidgets')
runApp('C:/Users/Kirill Zaitsev/Desktop/text-analysis-master')
install.packages('rJava')
runApp('C:/Users/Kirill Zaitsev/Desktop/text-analysis-master')
mylist<-(1,2,"c")
mylist<-list(1,2,"c")
unlist(mylist)
as.Date("2020/2/28") - as.Date("2020/3/1")
list.dirs()
file.open
file.open()
?dyplr
??dyplr
c(3,3)<c(7,2)
matrix(1:6,3,2)
matrix(1:6,3,2)[,-1]
x<-5:8
names(x)<-letters(5:8)
names(x)<-letters[5:8]
x
workingFiles <- data.frame(
"name" = "", # read from files - complete name, including extension
"datapath" = "", # read from files - complete path
"width" = 0, # do not populate
"height" = 0, # do not populate
"aspect" = 1, # do not populate
"scale" = NA, # read from folder of filepath
"newPath" = "", # create from name all images saved to edited/    No sub folders
check.names = FALSE
)
workingFiles
install.packages(“rvest”)
install.packages(rvest)
install.packages('rvest')
library rvest
library(rvest)
login <- "https://dashboard.tawk.to/login"
pgsession<-html_session(login)
pgsession
html_form(pgsession)
pgsession
rm(list = ls())
library('dplyr')
library('mosaic')
p0<-0.6          #Hypothesized propotion, value to compare
alpha=0.1        #Level of significance
data<-read.csv(file.choose(),sep = ',')
data = read.csv("1 sample proportion.csv")
setwd("C:/Users/Kirill Zaitsev/Desktop/My little R scripts/Stat_tests/scripts")
data = read.csv("1 sample proportion.csv")
sample_size <- nrow(data)
sample_size
View(data)
proportion <- table(data[,2])
proportion
data[,2]
proportion <- prop.table(proportion)
proportion
Z_score <- qnorm(p = alpha/2, lower.tail = FALSE)
MOE <- Z_score*sqrt((p*(1-p))/sample_size)
p <- proportion['1']
Z_score <- qnorm(p = alpha/2, lower.tail = FALSE)
MOE <- Z_score*sqrt((p*(1-p))/sample_size)
MOE
cat('The margin of error is ±',round(ME,4)*100,'%\n')
cat('The margin of error is ±',round(MOE,4)*100,'%\n')
paste0('The margin of error is ±',round(MOE,4)*100,'%\n')
paste0('The margin of error is ±',round(MOE,4)*100,'%')
paste0('The margin of error is ±', round(MOE, 4) * 100, '%')
paste0('The confidence interval of the proportion is from', round(p-MOE,4) * 100, '%', 'to', round(p+MOE , 4) * 100, '%')
paste0('The confidence interval of the proportion is from ', round(p-MOE,4) * 100, '%', ' to ', round(p+MOE , 4) * 100, '%')
rownames(data)
colnames(data)
colnames(data)[2]
paste0(colnames(data)[2], "/n")
cat(paste0(colnames(data)[2], "/n"))
cat(paste0(colnames(data)[2], "\n"))
cat(paste0(colnames(data)[2], "\n", "thing"))
paste0(colnames(data)[2], "\n", "thing")
cat
paste0(colnames(data)[2], "\n", "thing")
paste0(colnames(data)[2], "\n", "thing") %>% cat()
paste0(colnames(data)[2], "\n",
"n = ", sample_size, "\n",
"p = ", p, "\n",
"----------------",
"at ", 1 - alpha, "% confidence:", "\n",
"MOE = ±", round(MOE, 4) * 100, "%") %>% cat()
paste0(colnames(data)[2], "\n",
"n = ", sample_size, "\n",
"p = ", p, "\n",
"---------------- \,",
"at ", 1 - alpha, "% confidence:", "\n",
"MOE = ±", round(MOE, 4) * 100, "%") %>% cat()
paste0(colnames(data)[2], "\n",
"n = ", sample_size, "\n",
"p = ", p, "\n",
"---------------- \n",
"at ", 1 - alpha, "% confidence:", "\n",
"MOE = ±", round(MOE, 4) * 100, "%") %>% cat()
paste0(colnames(data)[2], "\n",
"n = ", sample_size, "\n",
"p = ", p, "\n",
"--------------------------- \n",
"at ", 1 - alpha, "% confidence:", "\n",
"MOE = ±", round(MOE, 4) * 100, "%") %>% cat()
paste0(colnames(data)[2], "\n",
"n = ", sample_size, "\n",
"p = ", round(p, 4) * 100, "%\n",
"--------------------------- \n",
"at ", 1 - alpha, "% confidence:", "\n",
"MOE = ±", round(MOE, 4) * 100, "%") %>% cat()
paste0(colnames(data)[2], "\n",
"n = ", sample_size, "\n",
"p = ", round(p, 4) * 100, "%\n",
"--------------------------- \n",
"at ", round(1 - alpha,2), "% confidence:", "\n",
"MOE = ±", round(MOE, 4) * 100, "%\n",
"") %>% cat()
paste0(colnames(data)[2], "\n",
"n = ", sample_size, "\n",
"p = ", round(p, 4) * 100, "%\n",
"--------------------------- \n",
"at ", round((1 - alpha) * 100,2), "% confidence:", "\n",
"MOE = ±", round(MOE, 4) * 100, "%\n",
"") %>% cat()
paste0(colnames(data)[2], "\n",
"n = ", sample_size, "\n",
"p = ", round(p, 4) * 100, "%\n",
"--------------------------- \n",
"at ", round((1 - alpha) * 100,2), "% confidence:", "\n",
"MOE = ±", round(MOE, 4) * 100, "%\n",
"CI = ", round(p - MOE, 4) * 100, '%', ' to ', round(p + MOE , 4) * 100, '%') %>% cat()
paste0(colnames(data)[2], "\n",
"n = ", sample_size, "\n",
"p = ", round(p, 4) * 100, "%\n",
"--------------------------- \n",
"at ", round((1 - alpha) * 100,2), "% confidence:", "\n",
"MOE = ±", round(MOE, 4) * 100, "%\n",
"CI = ", round(p - MOE, 4) * 100, '%', ' to ', round(p + MOE , 4) * 100, '%') %>% cat()
proportion
proportion<-tally(~data[,2],data=data,format='prop')[2]
proportion
# Count instances of 1 in the data
proportion <- table(data[,2])
proportion <- prop.table(proportion)
p <- proportion['1']
do
bootstrap_dist <- do(iterations) * rflip(nrow(data), p)
iterations = 10000
bootstrap_dist <- do(iterations) * rflip(nrow(data), p)
bootstrap_dist
par(mfrow=c(1,2))
qqnorm(bootstrap_dist$prop); qqline(bootstrap_dist$prop, col = 2)
hist(bootstrap_dist$prop,main='Histogram of the proportion')
range<-quantile(sort(bootstrap_dist$prop),c(alpha/2,1-alpha/2))
cat('The observed proportion is',round(proportion,6)*100,'%\n')
range<-quantile(sort(bootstrap_dist$prop),c(alpha/2,1-alpha/2))
range
# Traditional summary
paste0(colnames(data)[2], "\n",
"n = ", sample_size, "\n",
"p = ", round(p, 4) * 100, "%\n",
"------------ Traditional --------------- \n",
"at ", round((1 - alpha) * 100,2), "% confidence:", "\n",
"MOE = ±", round(MOE, 4) * 100, "%\n",
"CI = ", round(p - MOE, 4) * 100, '%', ' to ', round(p + MOE , 4) * 100, '%') %>% cat()
# Traditional summary
paste0(colnames(data)[2], "\n",
"n = ", sample_size, "\n",
"p = ", round(p, 4) * 100, "%\n",
"-------- Traditional ----------- \n",
"at ", round((1 - alpha) * 100,2), "% confidence:", "\n",
"MOE = ±", round(MOE, 4) * 100, "%\n",
"CI = ", round(p - MOE, 4) * 100, '%', ' to ', round(p + MOE , 4) * 100, '%') %>% cat()
# Traditional summary
paste0(colnames(data)[2], "\n",
"n = ", sample_size, "\n",
"p = ", round(p, 4) * 100, "%\n",
"-------- Traditional -------- \n",
"at ", round((1 - alpha) * 100,2), "% confidence:", "\n",
"MOE = ±", round(MOE, 4) * 100, "%\n",
"CI = ", round(p - MOE, 4) * 100, '%', ' to ', round(p + MOE , 4) * 100, '%') %>% cat()
rflip
range <- quantile(sort(bootstrap_dist$prop),c(alpha/2,1-alpha/2))
range <- quantile(sort(bootstrap_dist$prop), c(alpha/2, 1-alpha/2))
cat('The observed proportion is',round(proportion,6)*100,'%\n')
cat('The confidence interval for the proportion is from',round(range[1],6)*100,'% to',round(range[2],6)*100,'%\n')
cat('The margin of error is',round(proportion-range[1],6)*100,'%')
# Traditional summary
paste0(colnames(data)[2], "\n",
"n = ", sample_size, "\n",
"p = ", round(p, 4) * 100, "%\n",
"CL = ", round((1 - alpha) * 100,2), "%", "\n",
"-------- Traditional -------- \n",
"MOE = ±", round(MOE, 4) * 100, "%\n",
"CI = ", round(p - MOE, 4) * 100, '%', ' to ', round(p + MOE , 4) * 100, '%') %>% cat()
paste0("-------- Bootstrap -------- \n",
"\n",
"(after ", iterations," iterations)",) %>% cat()
paste0("-------- Bootstrap -------- \n",
"\n",
"(after ", iterations," iterations)") %>% cat()
format(10000, nsmall=1, big.mark=",")
format(10000, nsmall=0, big.mark=",")
paste0("-------- Bootstrap -------- \n",
"\n",
"(after ", format(iterations, nsmall=0, big.mark=",")," iterations)") %>% cat()
paste0("-------- Bootstrap -------- \n",
"MOE = ±", round(MOE, 4) * 100, "%\n",
"CI = ", round(p - MOE, 4) * 100, "%", ' to ', round(p + MOE , 4) * 100, "%\n",
"(after ", format(iterations, nsmall=0, big.mark=",")," iterations)") %>% cat()
cat('The confidence interval for the proportion is from',round(range[1],6)*100,'% to',round(range[2],6)*100,'%\n')
range
bootstrap_dist
paste0("-------- Bootstrap -------- \n",
"MOE = ±", round(p-range[1], 4) * 100, "%\n",
"CI = ", round(range[1], 4) * 100, "%", ' to ', round(range[2] , 4) * 100, "%\n",
"(after ", format(iterations, nsmall=0, big.mark=",")," iterations)") %>% cat()
paste0("-------- Bootstrap -------- \n",
"MOE = ±", round(p-range[1], 4) * 100, "%\n",
"CI = ", round(range[1], 4) * 100, "%", ' to ', round(range[2] , 4) * 100, "%\n",
"(after ", format(iterations, nsmall=0, big.mark=",")," iterations)") %>% cat()
# Traditional summary
summary <- paste0(colnames(data)[2], "\n",
"n = ", sample_size, "\n",
"p = ", round(p, 4) * 100, "%\n",
"CL = ", round((1 - alpha) * 100,2), "%", "\n",
"-------- Traditional -------- \n",
"MOE = ±", round(MOE, 4) * 100, "%\n",
"CI = ", round(p - MOE, 4) * 100, "%", " to ", round(p + MOE , 4) * 100, "%") %>% cat()
summary
# Traditional summary
summary <- paste0(colnames(data)[2], "\n",
"n = ", sample_size, "\n",
"p = ", round(p, 4) * 100, "%\n",
"CL = ", round((1 - alpha) * 100,2), "%", "\n",
"-------- Traditional -------- \n",
"MOE = ±", round(MOE, 4) * 100, "%\n",
"CI = ", round(p - MOE, 4) * 100, "%", " to ", round(p + MOE , 4) * 100, "%") %>% cat()
summary
onePopProp <- function(data = read.csv("1 sample proportion.csv"), alpha = 0.10, iterations = 10000) {
#' onePopProp takes in a data set of two columns with headers, "participant_id" and 0/1s
#' It returns string summary
#'
sample_size <- nrow(data)
# ---------- Traditional approach ----------
proportion <- table(data[,2])
proportion <- prop.table(proportion)
p <- proportion['1']
Z_score <- qnorm(p = alpha/2, lower.tail = FALSE)
MOE <- Z_score*sqrt((p*(1-p)) / sample_size)
paste0('The margin of error is ±', round(MOE, 4) * 100, '%')
paste0('The confidence interval of the proportion is from ', round(p-MOE,4) * 100, '%', ' to ', round(p+MOE , 4) * 100, '%')
# summary
paste0(colnames(data)[2], "\n",
"n = ", sample_size, "\n",
"p = ", round(p, 4) * 100, "%\n",
"CL = ", round((1 - alpha) * 100,2), "%", "\n",
"-------- Traditional -------- \n",
"MOE = ±", round(MOE, 4) * 100, "%\n",
"CI = ", round(p - MOE, 4) * 100, "%", " to ", round(p + MOE , 4) * 100, "%") %>% cat()
# ---------- Bootstrap approach ----------
bootstrap_dist <- do(iterations) * rflip(nrow(data), p)
range <- quantile(sort(bootstrap_dist$prop), c(alpha/2, 1-alpha/2))
paste0("-------- Bootstrap -------- \n",
"MOE = ±", round(p-range[1], 4) * 100, "%\n",
"CI = ", round(range[1], 4) * 100, "%", ' to ', round(range[2] , 4) * 100, "%\n",
"(after ", format(iterations, nsmall=0, big.mark=",")," iterations)") %>% cat()
return(TRUE)
}
onePopProp()
onePopProp <- function(data = read.csv("1 sample proportion.csv"), alpha = 0.10, iterations = 10000) {
#' onePopProp takes in a data set of two columns with headers, "participant_id" and 0/1s
#' Prints summary, nothing is returned
#'
sample_size <- nrow(data)
# ---------- Traditional approach ----------
proportion <- table(data[,2])
proportion <- prop.table(proportion)
p <- proportion['1']
Z_score <- qnorm(p = alpha/2, lower.tail = FALSE)
MOE <- Z_score*sqrt((p*(1-p)) / sample_size)
paste0('The margin of error is ±', round(MOE, 4) * 100, '%')
paste0('The confidence interval of the proportion is from ', round(p-MOE,4) * 100, '%', ' to ', round(p+MOE , 4) * 100, '%')
# summary
paste0(colnames(data)[2], "\n",
"n = ", sample_size, "\n",
"p = ", round(p, 4) * 100, "%\n",
"CL = ", round((1 - alpha) * 100,2), "%", "\n",
"-------- Traditional -------- \n",
"MOE = ±", round(MOE, 4) * 100, "%\n",
"CI = ", round(p - MOE, 4) * 100, "%", " to ", round(p + MOE , 4) * 100, "%") %>% cat()
# ---------- Bootstrap approach ----------
bootstrap_dist <- do(iterations) * rflip(nrow(data), p)
range <- quantile(sort(bootstrap_dist$prop), c(alpha/2, 1-alpha/2))
paste0("\n-------- Bootstrap -------- \n",
"MOE = ±", round(p-range[1], 4) * 100, "%\n",
"CI = ", round(range[1], 4) * 100, "%", ' to ', round(range[2] , 4) * 100, "%\n",
"(after ", format(iterations, nsmall=0, big.mark=",")," iterations)") %>% cat()
}
onePopProp()
onePopProp()
source("functions.R")
data = read.csv("Test data\1 sample proportion.csv")
onePopProp(data = read.csv("Test data/1 sample proportion.csv"))
setwd("C:/Users/Kirill Zaitsev/Desktop/My little R scripts/Stat_tests")
source("functions.R")
onePopProp(data = read.csv("Test data/1 sample proportion.csv"))
data = read.csv("Test data/1 sample proportion.csv")
source("functions.R")
onePopProp(data = read.csv("Test data/1 sample proportion.csv"),
alpha = 0.90,
iterations = 10000)
onePopProp(data = read.csv("Test data/1 sample proportion.csv"),
CL = 0.90,
iterations = 10000)
onePopProp(data = read.csv("Test data/1 sample proportion.csv"),
CL = 0.90,
iterations = 100000)
onePopProp(data = read.csv("Test data/1 sample proportion.csv"),
CL = 0.90,
iterations = 1000)
